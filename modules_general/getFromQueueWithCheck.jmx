<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="getValueFromQueue fragment modul" enabled="true"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 - check input values" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">/**
 * queue_host
 * queue_port
 * queue_point - value to use in request &quot;/listpoll?param=${queue_point}&quot; to get value
 * 
 * delay_time - pause between check queue iterations (in ms)
 * check_number - number of iterations to check queue (should be &gt; 1)
 * 
 * if queue value won&apos;t be gotten during (delay_time * check_number) / 1000 = X sec,
 * then sampler will be ended with error
 */

checkValue(&quot;queue_host&quot;, false);
checkValue(&quot;queue_port&quot;, false);
checkValue(&quot;queue_point&quot;, false);
checkValue(&quot;delay_time&quot;, true);
checkValue(&quot;check_number&quot;, true);

/**
 * checking value for emptiness, if number - should be &gt; 0
 */
public void checkValue(String paramName, boolean isInteger) {
	String value = vars.get(paramName);
	if (!isInteger &amp;&amp; isValueOK(value)) {
		return;
	}
	if (isInteger &amp;&amp; isValueOK(value) &amp;&amp; isNumberOK(value)) {
		return;
	}
	String errorMsg = &quot;ERROR: invalid value &quot; + value + &quot; in param: &quot; + paramName
	log.error(errorMsg)
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(errorMsg);
}

// is not null and not empty
public boolean isValueOK(String value) {
	return (value != null &amp;&amp; !value.isEmpty());
}

// is &gt; 0
public boolean isNumberOK(String number) {
	return (Integer.parseInt(number) &gt; 0);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="WC1" enabled="true">
          <stringProp name="WhileController.condition">${__jexl3(&quot;${whileFlag1}&quot;!=&quot;true&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="TestPlan.comments">5 min</stringProp>
            <stringProp name="ConstantTimer.delay">${delay_time}</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="** get itemGUID from list" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${queue_host}</stringProp>
            <stringProp name="HTTPSampler.port">${queue_port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/listpoll?param=${queue_point}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="itemGUID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">itemGUID</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSRPost-flagChecker" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//${__jm__WC1__idx} - var to check current loop number (starts from 0)

// set default not found value
def notFoundValue = &quot;NOTFOUND&quot;;

// get current loop iteration number
int iterCount = Integer.parseInt(vars.get(&quot;__jm__WC1__idx&quot;));

// set last iteration number = count of iterations to check - 1
int lastIter = Integer.parseInt(vars.get(&quot;check_number&quot;));
// check for 0. default value is 4
lastIter = (lastIter &lt;= 0) ? 4 : lastIter - 1;

// get value from queue to check
def gotItemGUID = vars.get(&quot;itemGUID&quot;);

// check got value - if found and length is ok - then set flag to end loop
if (!notFoundValue.equals(gotItemGUID) &amp;&amp; !(gotItemGUID.length() &lt; 2)) {
	vars.put(&quot;whileFlag1&quot;, &quot;true&quot;);
}

// condition for end of loop
if (iterCount &gt;= lastIter) {
	// end loop
	vars.put(&quot;whileFlag1&quot;, &quot;true&quot;);
	
	// set error status
	if (notFoundValue.equals(gotItemGUID) || (gotItemGUID.length() &lt; 2)) {
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;no documents found in the desired status&quot;);
	}	
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
